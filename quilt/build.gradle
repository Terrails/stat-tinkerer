plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    // change server run directory
    runs.server.runDir("run/server")
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
//    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilted_fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }

    // Night Config
    api(include("com.electronwill.night-config:core:${rootProject.nightconfig_version}"))
    api(include("com.electronwill.night-config:toml:${rootProject.nightconfig_version}"))
}

processResources {
    inputs.property "group", rootProject.group
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "group": rootProject.group,
                "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
