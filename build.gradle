plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.4-SNAPSHOT" apply false
    id "me.shedaniel.unified-publishing" version "0.1.+" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven { url = "https://maven.parchmentmc.org" }
        maven {
            name 'Curse Maven'
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip" as String)
        }        
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    base {
        // in "stattinkerer-loader-mc_version" format
        archivesName = "stattinkerer-${project.name}-${rootProject.minecraft_version}"
    }

    version = rootProject.mod_version
    group = "terrails.stattinkerer"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    task printChangelog {
        doLast {
            println(fetchChangelog())
        }
    }

    ext {
        fetchChangelog = {
            def branch = "git rev-parse --abbrev-ref HEAD".execute().in.text.trim()
            if (branch.isBlank() || branch == "HEAD") {
                throw new GradleException("Branch name could not be fetched.")
            }

            def repoUrl = "https://github.com/terrails/stat-tinkerer"
            def changes = new StringBuilder("Latest changes ([See all](${repoUrl}/commits/${branch}))\n---")
            def log = "git log --max-count=30 --pretty=format:\"* %s ([%h](${repoUrl}/commit/%H))\"".execute()
            log.in.eachLine { line ->
                if (!line.containsIgnoreCase("version")
                        && !line.containsIgnoreCase("bump")
                        && !line.containsIgnoreCase("update")) { // version change commits should be ignored
                    changes << "\n${line}"
                }
            }

            if (log.waitFor() == 0) {
                return changes.toString()
            } else {
                throw new GradleException("Received an error while executing git log.")
            }
        }
    }
}
